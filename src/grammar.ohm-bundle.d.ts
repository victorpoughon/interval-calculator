// AUTOGENERATED FILE
// This file was generated from grammar.ohm by `ohm generateBundles`.

import {
  BaseActionDict,
  Grammar,
  IterationNode,
  Node,
  NonterminalNode,
  Semantics,
  TerminalNode
} from 'ohm-js';

export interface IntervalCalculatorActionDict<T> extends BaseActionDict<T> {
  Exp?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  AddExp_add?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: NonterminalNode) => T;
  AddExp_sub?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: NonterminalNode) => T;
  AddExp?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  MulExp_mul?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: NonterminalNode) => T;
  MulExp_div?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: NonterminalNode) => T;
  MulExp?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  PowExp_pow?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: NonterminalNode) => T;
  PowExp?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  UnionExp_union?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: NonterminalNode) => T;
  UnionExp?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  UnaryTerm_pos?: (this: NonterminalNode, arg0: TerminalNode, arg1: NonterminalNode) => T;
  UnaryTerm_neg?: (this: NonterminalNode, arg0: TerminalNode, arg1: NonterminalNode) => T;
  UnaryTerm?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Term_paren?: (this: NonterminalNode, arg0: TerminalNode, arg1: NonterminalNode, arg2: TerminalNode) => T;
  Term_constant?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Term_infsymbol?: (this: NonterminalNode, arg0: TerminalNode) => T;
  Term?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  identifier?: (this: NonterminalNode, arg0: NonterminalNode, arg1: IterationNode) => T;
  identifierFirstLetter?: (this: NonterminalNode, arg0: NonterminalNode | TerminalNode) => T;
  FunctionExp?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: NonterminalNode, arg3: TerminalNode) => T;
  Interval?: (this: NonterminalNode, arg0: TerminalNode, arg1: NonterminalNode, arg2: TerminalNode, arg3: NonterminalNode, arg4: TerminalNode) => T;
  number_leftside?: (this: NonterminalNode, arg0: IterationNode, arg1: IterationNode, arg2: IterationNode) => T;
  number_rightside?: (this: NonterminalNode, arg0: TerminalNode, arg1: IterationNode) => T;
  number?: (this: NonterminalNode, arg0: NonterminalNode) => T;
}

export interface IntervalCalculatorSemantics extends Semantics {
  addOperation<T>(name: string, actionDict: IntervalCalculatorActionDict<T>): this;
  extendOperation<T>(name: string, actionDict: IntervalCalculatorActionDict<T>): this;
  addAttribute<T>(name: string, actionDict: IntervalCalculatorActionDict<T>): this;
  extendAttribute<T>(name: string, actionDict: IntervalCalculatorActionDict<T>): this;
}

export interface IntervalCalculatorGrammar extends Grammar {
  createSemantics(): IntervalCalculatorSemantics;
  extendSemantics(superSemantics: IntervalCalculatorSemantics): IntervalCalculatorSemantics;
}

declare const grammar: IntervalCalculatorGrammar;
export default grammar;

